<?php

/**
 * @copyright 2019 Beeflow Ltd
 * @author    Rafal Przetakowski <rafal.p@beeflow.co.uk>
 */

namespace App\Libs\ApiResponse;

use App\TransportObject\InvalidParam;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * @see     https://tools.ietf.org/html/rfc7807
 * @package App\Libs\ApiResponse
 */
class ApiProblem
{
    /**
     * @var string
     */
    private $apiVersion = '1.0';

    /**
     * A URI reference [RFC3986] that identifies the problem type.  This specification encourages that, when
     * dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML
     * [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be "about:blank".
     *
     * @see https://tools.ietf.org/html/rfc7807#section-4
     *
     * @var string
     */
    private $problemType;

    /**
     * A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the
     * problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section
     * 3.4)
     *
     * @see https://tools.ietf.org/html/rfc7807#section-3.1
     *
     * @var string
     */
    private $title;

    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     *
     * @see https://tools.ietf.org/html/rfc7807#section-3.1
     *
     * @var int
     */
    private $status = 400;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     *
     * @see https://tools.ietf.org/html/rfc7807#section-3.1
     *
     * @var string
     */
    private $detail;

    /**
     * A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further
     * information if dereferenced.
     *
     * @see https://tools.ietf.org/html/rfc7807#section-3.1
     *
     * @var string
     */
    private $problemInstance;

    /**
     * @see https://tools.ietf.org/html/rfc7807#section-3.2
     *
     * @var int
     */
    private $balance;

    /**
     * @see https://tools.ietf.org/html/rfc7807#section-3.2
     *
     * @var array
     */
    private $accounts = [];

    /**
     * @var InvalidParam[]
     */
    private $invalidParams = [];

    /**
     * @param string $version
     *
     * @return ApiProblem
     */
    public function setVersion(string $version): ApiProblem
    {
        $this->apiVersion = $version;

        return $this;
    }

    /**
     * @param string $problemType
     *
     * @return ApiProblem
     */
    public function setProblemType(string $problemType): ApiProblem
    {
        $this->problemType = $problemType;

        return $this;
    }

    /**
     * @param string $title
     *
     * @return ApiProblem
     */
    public function setTitle(string $title): ApiProblem
    {
        $this->title = $title;

        return $this;
    }

    /**
     * @param int $status
     *
     * @return ApiProblem
     */
    public function setStatus(int $status): ApiProblem
    {
        $this->status = $status;

        return $this;
    }

    /**
     * @param string $detail
     *
     * @return ApiProblem
     */
    public function setDetail(string $detail): ApiProblem
    {
        $this->detail = $detail;

        return $this;
    }

    /**
     * @param string $problemInstance
     *
     * @return ApiProblem
     */
    public function setProblemInstance(string $problemInstance): ApiProblem
    {
        $this->problemInstance = $problemInstance;

        return $this;
    }

    /**
     * @param int $balance
     *
     * @return ApiProblem
     */
    public function setBalance(int $balance): ApiProblem
    {
        $this->balance = $balance;

        return $this;
    }

    /**
     * @param array $accounts
     *
     * @return ApiProblem
     */
    public function setAccounts(array $accounts): ApiProblem
    {
        $this->accounts = $accounts;

        return $this;
    }

    /**
     * @param string $account
     *
     * @return ApiProblem
     */
    public function addAccounts(string $account): ApiProblem
    {
        $this->accounts[] = $account;

        return $this;
    }

    /**
     * @return array
     */
    public function getInvalidParams(): array
    {
        return $this->invalidParams;
    }

    /**
     * @param InvalidParam ...$invalidParams
     *
     * @return ApiProblem
     */
    public function addInvalidParams(InvalidParam ...$invalidParams): ApiProblem
    {
        foreach ($invalidParams as $param) {
            $this->invalidParams[] = $param->toArray();
        }

        return $this;
    }

    /**
     * @return JsonResponse
     */
    public function getResponse(): JsonResponse
    {
        $response = [
            'jsonApi' => [
                'version' => $this->getApiVersion()
            ],
            'title'   => $this->getTitle(),
        ];

        if (!empty($this->detail)) {
            $response['detail'] = $this->getDetail();
        }

        if (!empty($this->problemInstance)) {
            $response['instance'] = $this->getProblemInstance();
        }

        if (!empty($this->balance)) {
            $response['balance'] = $this->getBalance();
        }

        if (!empty($this->accounts)) {
            $response['accounts'] = $this->getAccounts();
        }

        if (!empty($this->problemType)) {
            $response['type'] = $this->getProblemType();
        }

        if (!empty($this->invalidParams)) {
            $response['invalid-params'] = $this->getInvalidParams();
        }

        return new JsonResponse($response, $this->getStatus(), ['Content-Type' => 'application/api-problem+json']);
    }

    /**
     * @return string
     */
    private function getApiVersion(): string
    {
        return $this->apiVersion;
    }

    /**
     * @return string
     */
    private function getProblemType(): string
    {
        return $this->problemType;
    }

    /**
     * @return string
     */
    private function getTitle(): string
    {
        return $this->title;
    }

    /**
     * @return int
     */
    private function getStatus(): int
    {
        return $this->status;
    }

    /**
     * @return string
     */
    private function getDetail(): string
    {
        return $this->detail;
    }

    /**
     * @return string
     */
    private function getProblemInstance(): string
    {
        return $this->problemInstance;
    }

    /**
     * @return int
     */
    private function getBalance(): int
    {
        return $this->balance;
    }

    /**
     * @return array
     */
    private function getAccounts(): array
    {
        return $this->accounts;
    }
}